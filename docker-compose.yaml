services:
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER_E}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_E}
      - POSTGRES_DB=${POSTGRES_DB_E}
    volumes:
      - postgres_db:/var/lib/postgresql/data
    networks:
      - gdd_internal
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_E} -d ${POSTGRES_DB_E}"]
      interval: 5s
      timeout: 5s
      retries: 5
  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER_E}:${POSTGRES_PASSWORD_E}@postgres/${POSTGRES_DB_E}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      # Variables for the init script.
      - AIRFLOW_ADMIN_USER=${AIRFLOW_USER_E}
      - AIRFLOW_ADMIN_FIRSTNAME=Eveliina
      - AIRFLOW_ADMIN_LASTNAME=Hampus
      - AIRFLOW_ADMIN_ROLE=Admin
      - AIRFLOW_ADMIN_EMAIL=eveliinahampus@gmail.com
      - AIRFLOW_ADMIN_PASSWORD=${AIRFLOW_PASSWORD_E}
    entrypoint: ["/opt/airflow/init-airflow.sh"]
    networks:
      - gdd_internal
    depends_on:
      postgres:
        condition: service_healthy

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER_E}:${POSTGRES_PASSWORD_E}@postgres/${POSTGRES_DB_E}
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - gdd_internal
    command: webserver
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER_E}:${POSTGRES_PASSWORD_E}@postgres/${POSTGRES_DB_E}
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    networks:
      - gdd_internal
    command: scheduler
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    env_file: .env
    ports:
      - "8000:8000"
    networks:
      - gdd_internal
    depends_on:
      - airflow-webserver
      - minio

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://fastapi:8000
    networks:
      - gdd_internal
    depends_on:
      - fastapi

  minio:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z
    ports:
      - "${MINIO_API_PORT_E:-9000}:9000"
      - "${MINIO_CONSOLE_PORT_E:-9001}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_DEFAULT_BUCKETS=${MINIO_DATA_BUCKET_NAME}
    volumes:
      - minio_data:/data
    networks:
      - gdd_internal
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    environment:
      - NGINX_ALLOWED_ADMIN_IP_1=${NGINX_ALLOWED_IP_1E}
      - NGINX_ALLOWED_ADMIN_IP_2=${NGINX_ALLOWED_IP_2E}
    depends_on:
      - streamlit
      - fastapi
      - airflow-webserver
    ports:
      - "80:80"
      - "443:443"
    networks:
      - gdd_internal

networks:
  gdd_internal:
    driver: bridge
    name: gdd_internal_net

volumes:
  postgres_db:
  airflow_dags:
  airflow_logs:
  airflow_plugins:
  minio_data:
